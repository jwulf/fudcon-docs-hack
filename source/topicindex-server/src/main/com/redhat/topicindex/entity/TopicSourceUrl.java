package com.redhat.topicindex.entity;

// Generated Aug 12, 2011 11:10:16 AM by Hibernate Tools 3.4.0.CR1

import java.net.URL;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import javax.persistence.Transient;

import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;

import org.hibernate.envers.Audited;
import org.hibernate.validator.Length;
import org.hibernate.validator.NotNull;
import org.htmlcleaner.HtmlCleaner;
import org.htmlcleaner.TagNode;

import com.redhat.topicindex.entity.base.AuditedEntity;
import com.redhat.topicindex.utils.SkynetExceptionUtilities;

/**
 * TopicSourceUrl generated by hbm2java
 */
@Entity
@Audited
@Table(name = "TopicSourceURL")
public class TopicSourceUrl extends AuditedEntity<TopicSourceUrl> implements java.io.Serializable
{
	private static final long serialVersionUID = 1923828486173137768L;
	private Integer topicSourceUrlid;
	private String sourceUrl;
	private String title;
	private String description;
	private Set<TopicToTopicSourceUrl> topicToTopicSourceUrls = new HashSet<TopicToTopicSourceUrl>(0);

	public TopicSourceUrl()
	{
		super(TopicSourceUrl.class);
	}

	public TopicSourceUrl(final String sourceUrl)
	{
		super(TopicSourceUrl.class);
		this.sourceUrl = sourceUrl;
	}

	public TopicSourceUrl(final String sourceUrl, final String description, final Set<TopicToTopicSourceUrl> topicToTopicSourceUrls)
	{
		super(TopicSourceUrl.class);
		this.sourceUrl = sourceUrl;
		this.description = description;
		this.topicToTopicSourceUrls = topicToTopicSourceUrls;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "TopicSourceURLID", unique = true, nullable = false)
	public Integer getTopicSourceUrlid()
	{
		return this.topicSourceUrlid;
	}

	public void setTopicSourceUrlid(final Integer topicSourceUrlid)
	{
		this.topicSourceUrlid = topicSourceUrlid;
	}

	@Column(name = "SourceURL", nullable = false, length = 2048)
	@NotNull
	@Length(max = 2048)
	public String getSourceUrl()
	{
		return this.sourceUrl;
	}

	public void setSourceUrl(final String sourceUrl)
	{
		this.sourceUrl = sourceUrl;
	}

	@Column(name = "Title", nullable = false, length = 512)
	@NotNull
	@Length(max = 512)
	public String getTitle()
	{
		return this.title;
	}

	public void setTitle(final String title)
	{
		this.title = title;
	}

	// @Column(name = "Description", length = 65535)
	@Column(name = "Description", columnDefinition = "TEXT")
	@Length(max = 65535)
	public String getDescription()
	{
		return this.description;
	}

	public void setDescription(final String description)
	{
		this.description = description;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "topicSourceUrl")
	public Set<TopicToTopicSourceUrl> getTopicToTopicSourceUrls()
	{
		return this.topicToTopicSourceUrls;
	}

	public void setTopicToTopicSourceUrls(final Set<TopicToTopicSourceUrl> topicToTopicSourceUrls)
	{
		this.topicToTopicSourceUrls = topicToTopicSourceUrls;
	}

	/**
	 * If the user has left the title field empty, try to download the page and
	 * get the title from the HTML.
	 */
	@SuppressWarnings("unused")
	@PrePersist
	@PreUpdate
	private void setTitle()
	{
		try
		{
			if (this.title == null || this.title.trim().length() == 0 && 
				(this.sourceUrl != null && !this.sourceUrl.trim().isEmpty()))
			{
				/* Some common string replacements to make in the titles */
				final Map<String, String> replaceList = new HashMap<String, String>();
				replaceList.put("&nbsp;", " ");

				// create an instance of HtmlCleaner
				final HtmlCleaner cleaner = new HtmlCleaner();

				// clean the source url
				final TagNode node = cleaner.clean(new URL(this.getSourceUrl()));

				// find the first title node
				final TagNode title = node.findElementByName("title", true);

				if (title != null)
				{
					// clean up the title
					String titleText = title.getText().toString();

					for (final String replace : replaceList.keySet())
						titleText = titleText.replaceAll(replace, replaceList.get(replace));
							
					titleText = titleText.trim();

					// assign it to the entity
					this.title = titleText;
				}
			}
		}
		catch (final Exception ex)
		{
			SkynetExceptionUtilities.handleException(ex, false, "Probably a problem with HTMLCleaner");
		}
	}

	@Override
	@Transient
	public Integer getId()
	{
		return this.topicSourceUrlid;
	}

}
